# This is the canonical file for allocation of bosswave payload object id PID.
---
  0.0.0.0/4:
    short: Binary protocols
    sym: Binary
    desc:
      This is a superclass for classes that are generally unreadable in
      their plain form and require translation.

  64.0.0.0/4:
    short: Human readable text
    sym: Text
    desc:
      This is a superclass for classes that are moderately understandable
      if they are read directly in their binary form. Generally these are
      protocols that were designed specifically to be human readable.

  0.0.0.0/24:
    short: Bosswave Routing Object
    sym: BWRoutingObject
    desc:
      This class and schema block is reserved for bosswave routing objects
      represented using the full PID.

  0.0.0.1/32:
    short: Access DChain hash
    sym: ROAccessDChainHash
    desc:
      An access dchain hash

  0.0.0.17/32:
    short: Permission DChain hash
    sym: ROPermissionDChainHash
    desc:
      A permission dchain hash

  0.0.0.2/32:
    short: Access DChain
    sym: ROAccessDChain
    desc:
      An access dchain

  0.0.0.18/32:
    short: Permission DChain
    sym: ROPermissionDChain
    desc:
      A permission dchain

  0.0.0.32/32:
    short: Access DOT
    sym: ROAccessDOT
    desc:
      An access DOT

  0.0.0.33/32:
    short: Permission DOT
    sym: ROPermissionDOT
    desc:
      A permission DOT

  0.0.0.48/32:
    short: Entity
    sym: ROEntity
    desc:
      An entity

  0.0.0.50/32:
    short: Entity with signing key
    sym: ROEntityWKey
    desc:
      An entity with signing key

  0.0.0.49/32:
    short: Origin verifying key
    sym: ROOriginVK
    desc:
      The origin VK of a message that does not contain a PAC

  0.0.0.51/32:
    short: Designated router verifying key
    sym: RODRVK
    desc:
      a 32 byte designated router verifying key

  0.0.0.64/32:
    short: Expiry
    sym: ROExpiry
    desc:
      Sets an expiry for the message

  0.0.0.80/32:
    short: Revocation
    sym: RORevocation
    desc:
      A revocation for an Entity or a DOT

  1.0.0.0/8:
    short: Blob
    sym: Blob
    desc:
      This is a class for schemas that do not use a public encoding format.
      In general it should be avoided. Schemas below this should include
      the key "readme" with a url to a description of the schema that is
      sufficiently detailed to allow for a developer to reverse engineer the
      protocol if required.

  2.0.0.0/8:
    short: MsgPack
    sym: MsgPack
    desc:
      This class is for schemas that are represented in MsgPack

  2.0.1.0/24:
    short: LogDict
    sym: LogDict
    desc:
      This class is for log messages encoded in msgpack

  3.0.0.0/8:
    short: Captain Proto
    sym: CapnP
    desc:
      This class is for captain proto interfaces. Schemas below this should
      include the key "schema" with a url to their .capnp file

  65.0.0.0/8:
    short: JSON
    sym: JSON
    desc:
      This class is for schemas that are represented in JSON

  66.0.0.0/8:
    short: XML
    sym: XML
    desc:
      This class is for schemas that are represented in XML

  67.0.0.0/8:
    short: YAML
    sym: YAML
    desc:
      This class is for schemas that are represented in YAML

  1.0.1.0/32:
    short: Binary actuation
    sym: BinaryActuation
    desc:
      This payload object is one byte long, 0x00 for off, 0x01 for on.

  1.0.2.0/32:
    short: Double
    sym: Double
    desc:
      This payload is an 8 byte long IEEE 754 double floating point value encoded
      in little endian. This should only be used if the semantic meaning is obvious
      in the context, otherwise a PID with a more specific semantic meaning should
      be used.

  1.0.1.1/32:
    short: Packed Bosswave Message
    sym: BWMessage
    desc:
      This object contains an entire signed and encoded bosswave message

  1.0.6.1/32:
    short: Wavelet binary
    sym: Wavelet
    desc:
      This object contains a BOSSWAVE Wavelet

  2.0.6.1/32:
    short: Wavelet manifest
    sym: WaveletManifest
    desc:
      This msgpack dictionary contains a wavelet manifest (see github.com/immesys/wavelet)

  2.0.2.0/32:
    short: Spawnpoint stdout
    sym: SpawnpointLog
    desc:
      This contains stdout data from a spawnpoint container. It is a msgpacked
      dictionary that contains a "service" key, a "time" key (unix nano timestamp)
      and a "contents" key and a "spalias" key.

  2.0.2.1/32:
      short: SpawnPoint heartbeat
      sym: SpawnpointHeartbeat
      desc:
        A heartbeat message from spawnpoint. It is a msgpack dictionary that
        contains the keys "Alias", "Time", "TotalMem", "TotalCpuShares",
        "AvailableMem", and "AvailableCpuShares".

  2.0.2.2/32:
      short: SpawnPoint Service Heartbeat
      sym: SpawnpointSvcHb
      desc:
        A heartbeat from spawnpoint about a currently running service. It is a
        msgpack dictionary that contains the keys "SpawnpointURI", "Name",
        "Time", "MemAlloc", and "CpuShares".

  2.0.3.0/24:
    short: TSTaggedMP
    sym: TSTaggedMP
    desc:
      This superclass describes "ts"->int64 tagged msgpack objects. The timestamp
      is used for merging entries and determining which is later and should be the
      final value.

  2.0.3.1/32:
    short: Simple Metadata entry
    sym: SMetadata
    desc:
      This contains a simple "val" string and "ts" int64 metadata entry. The key is
      determined by the URI. Other information MAY be present in the msgpacked
      object. The timestamp is used for merging metadata entries.

  2.0.3.0/24:
    short: TSTaggedMP
    sym: TSTaggedMP
    desc:
      This superclass describes "ts"->int64 tagged msgpack objects. The timestamp
      is used for merging entries and determining which is later and should be the
      final value.
  2.0.4.0/24:
    short: Hamilton Messages
    sym: HamiltonBase
    desc:
      This is the base class for messages used with the Hamilton motes. The only
      key guaranteed is "#" that contains a uint16 representation of the serial
      of the mote the message is destined for or originated from.

  2.0.4.64/26:
    short: Hamilton Telemetry
    sym: HamiltonTelemetry
    desc:
      This object contains a "#" field for the serial number, as well as possibly
      containing an "A" field with a list of X, Y, and Z accelerometer values. A
      "T" field containing the temperature as an integer in degrees C multiplied
      by 10000, and an "L" field containing the illumination in Lux.

  2.0.5.1/32:
    short: HSBLight Message
    sym: HSBLightMessage
    desc:
      This object may contain "hue", "saturation", "brightness" fields with a
      float from 0 to 1. It may also contain an "state" key with a boolean.
      Omitting fields leaves them at their previous state.

  2.0.6.1/32:
    short: InterfaceDescriptor
    sym: InterfaceDescriptor
    desc:
      This object is used to describe an interface. It contains "uri", "iface","svc","namespace"
      "prefix" and "metadata" keys.

  2.0.7.0/24:
    short: BW2ChatMessages
    sym: BW2ChatMessages
    desc:
      "These are MsgPack dictionaries sent for the BW2Chat program (https://github.com/gtfierro/bw2chat)"

  2.0.7.1/32:
    short: BW2Chat_CreateRoomMessage
    sym: BW2Chat_CreateRoomMessage
    desc:
      A dictionary with a single key "Name" indicating the room to be created. This will likely be deprecated.

  2.0.7.2/32:
    short: BW2Chat_ChatMessage
    sym: BW2Chat_ChatMessage
    desc:
      "A textual message to be sent to all members of a chatroom. This is a dictionary with three keys: 'Room', the name
      of the room to publish to (this is actually implicit in the publishing), 'From', the alias you are using for the
      chatroom, and 'Message', the actual string to be displayed to all users in the room."

  2.0.7.3/32:
    short: BW2Chat_JoinRoom
    sym: BW2Chat_JoinRoom
    desc:
      Notify users in the chatroom that you have joined. Dictionary with a single key "Alias" that has a value of your nickname

  2.0.7.4/32:
    short: BW2Chat_LeaveRoom
    sym: BW2Chat_LeaveRoom
    desc:
      Notify users in the chatroom that you have left. Dictionary with a single key "Alias" that has a value of your nickname

  2.0.8.0/24:
    short: Giles Messages
    sym: Giles_Messages
    desc:
      Messages for communicating with a Giles archiver

  2.0.8.0/32:
    short: Giles Archive Request
    sym: GilesArchiveRequest
    desc:
      "A MsgPack dictionary with the following keys:
      - URI (optional): the URI to subscribe to for data
      - PO (required): which PO object type to extract from messages on the URI
      - UUID (optional): the UUID to use, else it is consistently autogenerated.
      - Value (required): ObjectBuilder expression for how to extract the value
      - Time (optional): ObjectBuilder expression for how to extract any timestamp
      - TimeParse (optional): How to parse that timestamp
      - MetadataURI (optional): a base URI to scan for metadata (expands to uri/!meta/+)
      - MetadataBlock (optional): URI containing a key-value structure of metadata
      - MetadataExpr (optional): ObjectBuilder expression to search for a key-value structure
        in the current message for metadata
      ObjectBuilder expressions are documented at: https://github.com/gtfierro/giles2/tree/master/objectbuilder"

  2.0.8.1/32:
    short: Giles Key Value Query
    sym: GilesKeyValueQuery
    desc:
      "Expresses a query to a Giles instance. Expects 2 keys:
      - Query: A Giles query string following syntax at https://gtfierro.github.io/giles2/interface/#querylang
      - Nonce: a unique uint32 number for identifying the results of this query"

  2.0.8.2/32:
    short: Giles Metadata Response
    sym: GilesMetadataResponse
    desc:
        "Dictionary containing metadata results for a query. Has 2 keys:
        - Nonce: the uint32 number corresponding to the query nonce that generated this metadata response
        - Data: list of GilesKeyValueMetadata (2.0.8.3) objects "


  2.0.8.3/32:
    short: Giles Key Value Metadata
    sym: GilesKeyValueMetadata
    desc:
        "A dictionary containing metadata results for a single stream. Has 2 keys:
        - UUID: string identifying the stream
        - Metadata: a map of keys->values of metadata"

  2.0.8.4/32:
    short: Giles Timeseries Response
    sym: GilesTimeseriesResponse
    desc:
        "A dictionary containing timeseries results for a query. Has 2 keys:
        - Nonce: the uint32 number corresponding to the query nonce that generated this timeseries response
        - Data: list of GilesTimeseries (2.0.8.5) objects
        - Stats: list of GilesStatistics (2.0.8.6) objects"

  2.0.8.5/32:
    short: Giles Timeseries
    sym: GilesTimeseries
    desc:
        "A dictionary containing timeseries results for a single stream. has 3 keys:
        - UUID: string identifying the stream
        - Times: list of uint64 timestamps
        - Values: list of float64 values
        Times and Values will line up, e.g. index i of Times corresponds to index i of values"

  2.0.8.6/32:
    short: Giles Statistics
    sym: GilesStatistics
    desc:
        "A dictionary containing timeseries results for a single stream. has 3 keys:
        - UUID: string identifying the stream
        - Times: list of uint64 timestamps
        - Count: list of uint64 values
        - Min: list of float64 values
        - Mean: list of float64 values
        - Max: list of float64 values
        All fields will line up, e.g. index i of Times corresponds to index i of Count"

  2.0.8.9/32:
    short: Giles Query Error
    sym: GilesQueryError
    desc:
        "A dictionary containing an error returned by a query. Has 3 keys:
        - Query: the string query that was sent
        - Nonce: the nonce in the query request
        - Error: string of the returned error"
  
  2.0.9.0/24:
    short: Unique Object Stream
    sym: UniqueObjectStream
    desc:
        "An object that is part of a (possibly ordered) stream, identified 
        by UUID. It must contain at least a UUID key uniquely identifying 
        the collection"
        
  2.0.9.16/28:
    short: Timeseries Reading
    sym: TimeseriesReading
    desc:
        "Map with at least these keys:
        - UUID: string UUID uniquely identifying this timeseries
        - Time: int64 timestamp, UTC nanoseconds
        - Value: float64 value"
 
  2.0.10.1/32:
    short: L7G v1 Raw message
    sym: L7G1Raw
    desc:
      "A map containing
      - srcmac: the MAC address of the sensor
      - srcip: the IP address of the sensor, if available
      - type: the 16 bit L7G type field
      - popid: the ID of the point of presence that received the packet
      - poptime: the boot time (in us) of the pop when the message was received
      - brtime: the real time (in ns) at the border router when the message was relayed to bosswave
      - rssi: the RSSI of the message at the pop, if available
      - lqi: the LQI of the message at the pop, if available
      - payload: the raw message"
  
  2.0.10.2/32:
    short: L7G v1 stats message
    sym: L7G1Stats
    desc:
      tbd
      
  2.0.11.1/32:
    short: Chirp Anemometer Feed
    sym: ChirpFeed
    desc:
      "A map containing
      - vendor: the vendor implementing the algorithm
      - sensor: the anemometer this data is for
      - algorithm: symbol name of the algorithm type/version
      - tofs: a list of src,dst,val time of flight measurements in microseconds
      - extradata: a list of string extra from the algorithm"
  
  2.0.11.2/32:
    short: Hamilton OT
    sym: HamiltonOT
    desc:
      "A map containing
        - time: nanoseconds since the epoch
        - other stuff TODO"

  2.0.11.3/32:
    short: Hamilton Orientation
    sym: HamiltonOR
    desc:
      "A map containing
        - time: nanoseconds since the epoch
        - other stuff TODO"
        
  2.0.12.1/32:    
    short: VenstarInfo
    sym: VenstarInfo
    desc:
      "Consult the venstar API documentation at http://developer.venstar.com/restcalls.html"
      
  2.0.12.2/32:
    short: VenstarControl
    sym: VenstarControl
    desc:
      "Consult the documentation"
  
  2.0.12.3/32:
    short: TPLink
    sym: TPLink
    desc:
      "Consult the documentation"
      
  64.0.1.0/32:
    short: String
    sym: String
    desc:
      A plain string with no rigid semantic meaning. This can be thought of
      as a print statement. Anything that has semantic meaning like a process
      log should use a different schema.

  64.0.1.1/32:
    short: FMD Intent String
    sym: FMDIntentString
    desc:
      A plain string used as an intent for the follow-me display service.

  64.0.1.2/32:
    short: Account balance
    sym: AccountBalance
    desc:
      A comma seperated representation of an account and its balance as addr,decimal,human_readable. For
      example 0x49b1d037c33fdaad75d2532cd373fb5db87cc94c,57203431159181996982272,57203.4311 Ether  . Be
      careful in that the decimal representation will frequently be bigger than an int64.

  67.0.2.0/32:
    short: SpawnPoint config
    sym: SpawnpointConfig
    desc:
      A configuration file for SpawnPoint (github.com/immesys/spawnpoint)
